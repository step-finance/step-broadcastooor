version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.3
  aws-ecs: circleci/aws-ecs@3.2.0

executors:
  custom:
    machine:
      image: default
    resource_class: xlarge

jobs:
  lint:
    docker:
      - image: rust:1.77
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Install prereqs"
          command: "apt-get update && apt-get install -y pkg-config libssl-dev git openssh-client libclang-dev"
      - run:
          name: "Install rustfmt"
          command: "rustup component add rustfmt && rustup component add clippy"
      - run:
          name: "Format rust code"
          command: "cargo fmt --all -- --check"
      - add_ssh_keys:
          fingerprints:
            - "SHA256:JNM7M2vDYYXuIiTFU3dtgRdBZrT6+uASFIwZ2DFL9z4"
      - run:
          name: "Check rust code"
          command: "cargo clippy --release -- -D warnings --warn clippy::all"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/release/.fingerprint
            - target/release/build
            - target/release/deps
          key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
  test:
    docker:
      - image: rust:1.77
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - add_ssh_keys:
          fingerprints:
            - "SHA256:JNM7M2vDYYXuIiTFU3dtgRdBZrT6+uASFIwZ2DFL9z4"
      - run:
          name: "Unit tests"
          command: "cargo test --release"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/release/.fingerprint
            - target/release/build
            - target/release/deps
          key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - save_cache:
          paths:
            - sdk/src/types/
          key: v1-ts-types-{{ arch }}-{{ checksum "Cargo.lock" }}
  build:
    docker:
      - image: rust:1.77
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - add_ssh_keys:
          fingerprints:
            - "SHA256:JNM7M2vDYYXuIiTFU3dtgRdBZrT6+uASFIwZ2DFL9z4"
      - run:
          name: "Build check"
          command: "cargo check --release"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/release/.fingerprint
            - target/release/build
            - target/release/deps
          key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
  publish-sdk:
    docker:
      - image: cimg/rust:1.77-node
    steps:
      - checkout
      - run:
          name: "Root folder cache fix prep"
          command: |
            sudo chmod 777 /root
            mkdir /root/project
      - restore_cache:
          keys:
            - v1-ts-types-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Root folder cache fix move"
          command: |
            mv /root/project/sdk /home/circleci/project/sdk
      # Using the Cargo.lock file to get the version of the Ingestooor SDK
      # Check if the version is already published, and if not, update the version in package.json
      - run:
          name: "Check version"
          command: |
            DOOOT_VERSION_LINE=`sed -e '1,/name = "step-ingestooor-sdk"/d' ./Cargo.lock`
            DOOOT_VERSION_LINE=`echo $DOOOT_VERSION_LINE | head -n 1 | xargs -n 1 printf "%s,"`
            IFS=',' read -r -a DOOOT_VERSION_ARRAY \<<< "${DOOOT_VERSION_LINE}"
            DOOOT_VERSION=${DOOOT_VERSION_ARRAY[2]}
            echo "Ingestooor Dooot Version: ${DOOOT_VERSION}"
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            PUBLISHED_VERSION=`npm view @stepfinance/broadcastooor version`
            echo "Current NPM Version: ${PUBLISHED_VERSION}"
            if [ "${DOOOT_VERSION}" == "${PUBLISHED_VERSION}" ]; then
              echo "Version already published"
              circleci-agent step halt
            fi
            cd sdk
            npm version --no-git-tag-version ${DOOOT_VERSION}
      # If didn't halt above: install, build and publish the SDK
      - run:
          name: "NPM Install, Build, Publish"
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            cd sdk
            npm i
            npm run build
            npm publish

workflows:
  run-pipeline:
    jobs:
      # Lint, test and build checks
      - lint:
          filters:
            branches:
              ignore:
                - main
      - test:
          requires:
            - lint
          filters:
            branches:
              ignore:
                - main
      - build:
          requires:
            - lint
            - test
          filters:
            branches:
              ignore:
                - main
                - develop

      # Publish SDK to NPM
      - publish-sdk:
          requires:
            - test
          filters:
            branches:
              only:
                - develop

      # Build and push image to ECR
      - aws-ecr/build-and-push-image:
          executor: custom
          repo: step-broadcastooor
          region: eu-north-1
          tag: ${CIRCLE_BRANCH},${CIRCLE_BRANCH}-<< pipeline.number >>,${CIRCLE_BRANCH}-<< pipeline.number >>-${CIRCLE_SHA1}
          context: aws-account
          pre-steps:
            - add_ssh_keys:
                fingerprints:
                  - "SHA256:JNM7M2vDYYXuIiTFU3dtgRdBZrT6+uASFIwZ2DFL9z4"
            - run:
                name: "ssh agent"
                command: "eval $(ssh-agent)"
          #below should work as default=$SSH_AUTH_SOCK but isn't for some reason
          #this will break in the future if that id_rsa file is named differently
          #due to a circleci change
          extra-build-args: "--ssh default=/home/circleci/.ssh/id_rsa_464f187ab7117fc1e5fd43b2731dd300"
          filters:
            branches:
              only:
                - main
                - develop

      # Pre update (no hold required)
      - aws-ecs/deploy-service-update:
          cluster: "pre-api-cluster"
          family: "pre-broadcastooor"
          service-name: "pre-broadcastooor-service"
          container-env-var-updates: container=pre-broadcastooor-container,name=STEP_VERSION,value=${CIRCLE_BRANCH}-<< pipeline.number >>-${CIRCLE_SHA1}
          container-image-name-updates: container=pre-broadcastooor-container,tag=${CIRCLE_BRANCH}-<< pipeline.number >>-${CIRCLE_SHA1}
          enable-circuit-breaker: true
          force-new-deployment: true
          context: aws-account
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only:
                - develop

      # Live hold and update
      - hold-live:
          type: approval
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only:
                - main
      - aws-ecs/deploy-service-update:
          cluster: "live-api-cluster"
          family: "live-broadcastooor"
          service-name: "live-broadcastooor-service"
          container-env-var-updates: container=live-broadcastooor-container,name=STEP_VERSION,value=${CIRCLE_BRANCH}-<< pipeline.number >>-${CIRCLE_SHA1}
          container-image-name-updates: container=live-broadcastooor-container,tag=${CIRCLE_BRANCH}-<< pipeline.number >>-${CIRCLE_SHA1}
          enable-circuit-breaker: true
          force-new-deployment: true
          context: aws-account
          requires:
            - aws-ecr/build-and-push-image
            - hold-live
          filters:
            branches:
              only:
                - main
